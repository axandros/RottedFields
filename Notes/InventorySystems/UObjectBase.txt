https://www.youtube.com/watch?v=-WNwo-riV1Y


// Blueprints will bind to this to update the UI
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnInventoryUpdated;

UCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent)
class UInventoryComponent : public UActorComponent{
GENERATED_BODY()
public:
	UInventoryComponent()'
		
	virtual void BeginPlay() override;
	
	bool AddItem(class UItemAbstract* Item);
	bool RemoveItem(class UItemAbstract* Item);
	
	// Items that start in the inventory
	UPROPERTY(EditDefaultsOnly, Instanced)
	TArray<class UItem*> DefaultItems;
	
	UPROPERTY(EditDefaultsOnly, Cateogry = "Inventory)
	int32 Capacity;
	
	UPROPERTY(BlueprintAssignable, Category="Inventory")
	FOnInventoryUpdated OnInventoryUpdated;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Items")
	TArray<class UItemAbstract*> Items;
}

-------------------------------------------------

UCLASS(Abstract, BlueprintType, Blueprintable, EditInlineNew, DefaultToInstanced)
class UItemAbstract : public UObject{
	GENERATED_BODY()
	
public:
	UItemAbstract();
	
	virtual class UWorld GetWorld() const{return World};
	
	UPROPERTY(Transient)
	class UWorld* world;
	
	// The text for using the item. - EG, the item tooltip
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item")
	FText UseActionText;
	
	// The mesh to display for this items pickup
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item")
	class UStaticMesh* PickupMesh;
	
	// The Thumbnail for this item.
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item")
	class UTexture2D* Thumbnail;
	
	// Display name for the item in the inventory
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item")
	FText ItemDislpayName;
	
	// An optional description for the item
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item", meta = (Multiline = true))
	FText ItemDescription;
	
	// Weight of the item
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item", meta = (ClampMin = 0.0))
	float Weight;
	
	// The inventory that owns this item.
	UPROPERTY()
	class UInventoryComponent* OwningInventory;
	
	virtual void Use(class ACustomCharacter* Character); // PURE_VIRTUAL(UItemAbstract, );
	
}

-------------------------------------------------

UCLASS()
class UFoodItem : public UITemAbstract{
GENERATED_BODY()
protected"
	virtual void Use(class ACustomCharacter* Character) override{
		Character->Heal(Healing);
	}
	
	UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category="Item")
	float Healing = 10.0f;
}